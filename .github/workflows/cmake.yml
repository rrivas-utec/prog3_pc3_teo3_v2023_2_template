name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Update ubuntu
      run: sudo apt-get update

    - name: Install tbb
      run: sudo apt-get install libtbb-dev

    - name: Install catch
      run: sudo apt-get install catch

    - name: Install cppcheck
      run: sudo apt-get install cppcheck

    - name: Install valgrind
      run: sudo apt-get install valgrind

    - name: Install cbmc
      run: sudo apt-get install cbmc

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Catch Test
      working-directory: ${{github.workspace}}/build/autograder
      run: ./prog3_pc3_teo3_v2023_2_test

    - name: CppCheck Test
      working-directory: ${{github.workspace}}/autograder/tests/cppcheck
      run: |
           chmod +x run_test
           ./run_test

    - name: Valgrind Test
      working-directory: ${{github.workspace}}/build/autograder
      run: valgrind --tool=memcheck --leak-check=yes --xtree-memory=full ./prog3_pc3_teo3_v2023_2_test

